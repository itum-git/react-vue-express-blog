import{r as a,aq as e,y as t,a9 as l,aa as s,ai as n,am as r,o,c as i,n as u,u as c,au as p,A as d,t as m,aW as f,i as V,ax as y,aC as g,aH as v,d as k,cf as b,bB as h,av as S,at as w,k as x,az as F,c0 as A,bb as T,c4 as $,x as D,an as _,e as E,c6 as q}from"./index.6765fe01.js";const C=l({header:{type:String,default:""},bodyStyle:{type:s([String,Object,Array]),default:""},shadow:{type:String,values:["always","hover","never"],default:"always"}}),N=n({name:"ElCard"});const B=v(g(n({...N,props:C,setup(a){const e=r("card");return(a,t)=>(o(),i("div",{class:u([c(e).b(),c(e).is(`${a.shadow}-shadow`)])},[a.$slots.header||a.header?(o(),i("div",{key:0,class:u(c(e).e("header"))},[p(a.$slots,"header",{},(()=>[d(m(a.header),1)]))],2)):f("v-if",!0),V("div",{class:u(c(e).e("body")),style:y(a.bodyStyle)},[p(a.$slots,"default")],6)],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/card/src/card.vue"]])),j=l({animated:{type:Boolean,default:!1},count:{type:Number,default:1},rows:{type:Number,default:3},loading:{type:Boolean,default:!0},throttle:{type:Number}}),I=l({variant:{type:String,values:["circle","rect","h1","h3","text","caption","p","image","button"],default:"text"}}),z=n({name:"ElSkeletonItem"});var H=g(n({...z,props:I,setup(a){const e=r("skeleton");return(a,t)=>(o(),i("div",{class:u([c(e).e("item"),c(e).e(a.variant)])},["image"===a.variant?(o(),k(c(b),{key:0})):f("v-if",!0)],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton-item.vue"]]);const L=n({name:"ElSkeleton"});const M=v(g(n({...L,props:j,setup(l,{expose:s}){const n=l,d=r("skeleton"),m=((l,s=0)=>{if(0===s)return l;const n=a(!1);let r=0;const o=()=>{r&&clearTimeout(r),r=window.setTimeout((()=>{n.value=l.value}),s)};return e(o),t((()=>l.value),(a=>{a?o():n.value=a})),n})(h(n,"loading"),n.throttle);return s({uiLoading:m}),(a,e)=>c(m)?(o(),i("div",F({key:0,class:[c(d).b(),c(d).is("animated",a.animated)]},a.$attrs),[(o(!0),i(S,null,w(a.count,(e=>(o(),i(S,{key:e},[a.loading?p(a.$slots,"template",{key:e},(()=>[x(H,{class:u(c(d).is("first")),variant:"p"},null,8,["class"]),(o(!0),i(S,null,w(a.rows,(e=>(o(),k(H,{key:e,class:u([c(d).e("paragraph"),c(d).is("last",e===a.rows&&a.rows>1)]),variant:"p"},null,8,["class"])))),128))])):f("v-if",!0)],64)))),128))],16)):p(a.$slots,"default",A(F({key:1},a.$attrs)))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton.vue"]]),{SkeletonItem:H});T(H);const O={__name:"CountTo",props:{startVal:$.number.def(0),endVal:$.number.def(2021),duration:$.number.def(3e3),autoplay:$.bool.def(!0),decimals:$.number.validate((a=>a>=0)).def(0),decimal:$.string.def("."),separator:$.string.def(","),prefix:$.string.def(""),suffix:$.string.def(""),useEasing:$.bool.def(!0),easingFn:{type:Function,default:(a,e,t,l)=>t*(1-Math.pow(2,-10*a/l))*1024/1023+e}},emits:["mounted","callback"],setup(a,{expose:l,emit:s}){const n=a,{getPrefixCls:r}=E(),p=r("count-to"),d=a=>{const{decimals:e,decimal:t,separator:l,suffix:s,prefix:r}=n;a=Number(a).toFixed(e);const o=(a+="").split(".");let i=o[0];const u=o.length>1?t+o[1]:"",c=/(\d+)(\d{3})/;if(l&&!q(l))for(;c.test(i);)i=i.replace(c,"$1"+l+"$2");return r+i+u+s},f=D({localStartVal:n.startVal,displayValue:d(n.startVal),printVal:null,paused:!1,localDuration:n.duration,startTime:null,timestamp:null,remaining:null,rAF:null}),V=h(f,"displayValue");e((()=>{n.autoplay&&g(),s("mounted")}));const y=_((()=>n.startVal>n.endVal));t([()=>n.startVal,()=>n.endVal],(()=>{n.autoplay&&g()}));const g=()=>{const{startVal:a,duration:e}=n;f.localStartVal=a,f.startTime=null,f.localDuration=e,f.paused=!1,f.rAF=requestAnimationFrame(b)},v=()=>{cancelAnimationFrame(f.rAF)},k=()=>{f.startTime=null,f.localDuration=+f.remaining,f.localStartVal=+f.printVal,requestAnimationFrame(b)},b=a=>{const{useEasing:e,easingFn:t,endVal:l}=n;f.startTime||(f.startTime=a),f.timestamp=a;const r=a-f.startTime;f.remaining=f.localDuration-r,e?c(y)?f.printVal=f.localStartVal-t(r,0,f.localStartVal-l,f.localDuration):f.printVal=t(r,f.localStartVal,l-f.localStartVal,f.localDuration):c(y)?f.printVal=f.localStartVal-(f.localStartVal-l)*(r/f.localDuration):f.printVal=f.localStartVal+(l-f.localStartVal)*(r/f.localDuration),c(y)?f.printVal=f.printVal<l?l:f.printVal:f.printVal=f.printVal>l?l:f.printVal,f.displayValue=d(f.printVal),r<f.localDuration?f.rAF=requestAnimationFrame(b):s("callback")};return l({pauseResume:()=>{f.paused?(k(),f.paused=!1):(v(),f.paused=!0)},reset:()=>{f.startTime=null,cancelAnimationFrame(f.rAF),f.displayValue=d(n.startVal)},start:g,pause:v}),(a,e)=>(o(),i("span",{class:u(c(p))},m(c(V)),3))}};export{B as E,O as _,M as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
