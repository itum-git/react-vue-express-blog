import{a9 as e,aa as t,bU as a,ai as s,aP as u,an as l,am as r,b2 as n,ah as p,o,d as c,w as f,au as d,n as m,u as g,ax as i,aV as b,aC as y,aH as h,aU as $}from"./index.6765fe01.js";const j=Symbol("rowContextKey"),v=e({tag:{type:String,default:"div"},span:{type:Number,default:24},offset:{type:Number,default:0},pull:{type:Number,default:0},push:{type:Number,default:0},xs:{type:t([Number,Object]),default:()=>a({})},sm:{type:t([Number,Object]),default:()=>a({})},md:{type:t([Number,Object]),default:()=>a({})},lg:{type:t([Number,Object]),default:()=>a({})},xl:{type:t([Number,Object]),default:()=>a({})}}),x=s({name:"ElCol"});const N=h(y(s({...x,props:v,setup(e){const t=e,{gutter:a}=u(j,{gutter:l((()=>0))}),s=r("col"),y=l((()=>{const e={};return a.value&&(e.paddingLeft=e.paddingRight=a.value/2+"px"),e})),h=l((()=>{const e=[];["span","offset","pull","push"].forEach((a=>{const u=t[a];n(u)&&("span"===a?e.push(s.b(`${t[a]}`)):u>0&&e.push(s.b(`${a}-${t[a]}`)))}));return["xs","sm","md","lg","xl"].forEach((a=>{n(t[a])?e.push(s.b(`${a}-${t[a]}`)):p(t[a])&&Object.entries(t[a]).forEach((([t,u])=>{e.push("span"!==t?s.b(`${a}-${t}-${u}`):s.b(`${a}-${u}`))}))})),a.value&&e.push(s.is("guttered")),e}));return(e,t)=>(o(),c(b(e.tag),{class:m([g(s).b(),g(h)]),style:i(g(y))},{default:f((()=>[d(e.$slots,"default")])),_:3},8,["class","style"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/col/src/col.vue"]])),w=e({tag:{type:String,default:"div"},gutter:{type:Number,default:0},justify:{type:String,values:["start","center","end","space-around","space-between","space-evenly"],default:"start"},align:{type:String,values:["top","middle","bottom"],default:"top"}}),E=s({name:"ElRow"});const O=h(y(s({...E,props:w,setup(e){const t=e,a=r("row"),s=l((()=>t.gutter));$(j,{gutter:s});const u=l((()=>{const e={};return t.gutter?(e.marginRight=e.marginLeft=`-${t.gutter/2}px`,e):e}));return(e,s)=>(o(),c(b(e.tag),{class:m([g(a).b(),g(a).is(`justify-${t.justify}`,"start"!==e.justify),g(a).is(`align-${t.align}`,"top"!==e.align)]),style:i(g(u))},{default:f((()=>[d(e.$slots,"default")])),_:3},8,["class","style"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/row/src/row.vue"]]));export{O as E,N as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
