import{a9 as e,bS as s,ai as a,am as n,o as i,c as l,d as t,w as o,aV as d,u as r,ar as u,aW as c,n as f,au as p,aC as k,aH as m}from"./index.6765fe01.js";const y=e({type:{type:String,values:["primary","success","warning","info","danger","default"],default:"default"},underline:{type:Boolean,default:!0},disabled:{type:Boolean,default:!1},href:{type:String,default:""},icon:{type:s}}),b={click:e=>e instanceof MouseEvent},v=["href"],h=a({name:"ElLink"});const g=m(k(a({...h,props:y,emits:b,setup(e,{emit:s}){const a=e,k=n("link");function m(e){a.disabled||s("click",e)}return(e,s)=>(i(),l("a",{class:f([r(k).b(),r(k).m(e.type),r(k).is("disabled",e.disabled),r(k).is("underline",e.underline&&!e.disabled)]),href:e.disabled||!e.href?void 0:e.href,onClick:m},[e.icon?(i(),t(r(u),{key:0},{default:o((()=>[(i(),t(d(e.icon)))])),_:1})):c("v-if",!0),e.$slots.default?(i(),l("span",{key:1,class:f(r(k).e("inner"))},[p(e.$slots,"default")],2)):c("v-if",!0),e.$slots.icon?p(e.$slots,"icon",{key:2}):c("v-if",!0)],10,v))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/link/src/link.vue"]]));export{g as E};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWwtbGluay45OGUyNGNiYi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2xpbmsvc3JjL2xpbmsubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2xpbmsvc3JjL2xpbmsyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9saW5rL2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUubWpzJztcbmltcG9ydCB7IGljb25Qcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9pY29uLm1qcyc7XG5cbmNvbnN0IGxpbmtQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICB0eXBlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbHVlczogW1wicHJpbWFyeVwiLCBcInN1Y2Nlc3NcIiwgXCJ3YXJuaW5nXCIsIFwiaW5mb1wiLCBcImRhbmdlclwiLCBcImRlZmF1bHRcIl0sXG4gICAgZGVmYXVsdDogXCJkZWZhdWx0XCJcbiAgfSxcbiAgdW5kZXJsaW5lOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIGRpc2FibGVkOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gIGhyZWY6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiBcIlwiIH0sXG4gIGljb246IHtcbiAgICB0eXBlOiBpY29uUHJvcFR5cGVcbiAgfVxufSk7XG5jb25zdCBsaW5rRW1pdHMgPSB7XG4gIGNsaWNrOiAoZXZ0KSA9PiBldnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50XG59O1xuXG5leHBvcnQgeyBsaW5rRW1pdHMsIGxpbmtQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGluay5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgdW5yZWYsIGNyZWF0ZUJsb2NrLCB3aXRoQ3R4LCByZXNvbHZlRHluYW1pY0NvbXBvbmVudCwgY3JlYXRlQ29tbWVudFZOb2RlLCByZW5kZXJTbG90IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEVsSWNvbiB9IGZyb20gJy4uLy4uL2ljb24vaW5kZXgubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgubWpzJztcbmltcG9ydCB7IGxpbmtQcm9wcywgbGlua0VtaXRzIH0gZnJvbSAnLi9saW5rLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Lm1qcyc7XG5cbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJocmVmXCJdO1xuY29uc3QgX19kZWZhdWx0X18gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsTGlua1wiXG59KTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IGxpbmtQcm9wcyxcbiAgZW1pdHM6IGxpbmtFbWl0cyxcbiAgc2V0dXAoX19wcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJsaW5rXCIpO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgICBpZiAoIXByb3BzLmRpc2FibGVkKVxuICAgICAgICBlbWl0KFwiY2xpY2tcIiwgZXZlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJhXCIsIHtcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtcbiAgICAgICAgICB1bnJlZihucykuYigpLFxuICAgICAgICAgIHVucmVmKG5zKS5tKF9jdHgudHlwZSksXG4gICAgICAgICAgdW5yZWYobnMpLmlzKFwiZGlzYWJsZWRcIiwgX2N0eC5kaXNhYmxlZCksXG4gICAgICAgICAgdW5yZWYobnMpLmlzKFwidW5kZXJsaW5lXCIsIF9jdHgudW5kZXJsaW5lICYmICFfY3R4LmRpc2FibGVkKVxuICAgICAgICBdKSxcbiAgICAgICAgaHJlZjogX2N0eC5kaXNhYmxlZCB8fCAhX2N0eC5ocmVmID8gdm9pZCAwIDogX2N0eC5ocmVmLFxuICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgICAgfSwgW1xuICAgICAgICBfY3R4Lmljb24gPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKHVucmVmKEVsSWNvbiksIHsga2V5OiAwIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgIChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2socmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoX2N0eC5pY29uKSkpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgXzogMVxuICAgICAgICB9KSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICBfY3R4LiRzbG90cy5kZWZhdWx0ID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIHtcbiAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zKS5lKFwiaW5uZXJcIikpXG4gICAgICAgIH0sIFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgICAgICAgXSwgMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgX2N0eC4kc2xvdHMuaWNvbiA/IHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiaWNvblwiLCB7IGtleTogMiB9KSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgIF0sIDEwLCBfaG9pc3RlZF8xKTtcbiAgICB9O1xuICB9XG59KTtcbnZhciBMaW5rID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9saW5rL3NyYy9saW5rLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBMaW5rIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmsyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgubWpzJztcbmltcG9ydCBMaW5rIGZyb20gJy4vc3JjL2xpbmsyLm1qcyc7XG5leHBvcnQgeyBsaW5rRW1pdHMsIGxpbmtQcm9wcyB9IGZyb20gJy4vc3JjL2xpbmsubWpzJztcbmltcG9ydCB7IHdpdGhJbnN0YWxsIH0gZnJvbSAnLi4vLi4vdXRpbHMvdnVlL2luc3RhbGwubWpzJztcblxuY29uc3QgRWxMaW5rID0gd2l0aEluc3RhbGwoTGluayk7XG5cbmV4cG9ydCB7IEVsTGluaywgRWxMaW5rIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJsaW5rUHJvcHMiLCJidWlsZFByb3BzIiwidHlwZSIsIlN0cmluZyIsInZhbHVlcyIsImRlZmF1bHQiLCJ1bmRlcmxpbmUiLCJCb29sZWFuIiwiZGlzYWJsZWQiLCJocmVmIiwiaWNvbiIsImljb25Qcm9wVHlwZSIsImxpbmtFbWl0cyIsImNsaWNrIiwiZXZ0IiwiTW91c2VFdmVudCIsIl9ob2lzdGVkXzEiLCJfX2RlZmF1bHRfXyIsImRlZmluZUNvbXBvbmVudCIsIm5hbWUiLCJFbExpbmsiLCJ3aXRoSW5zdGFsbCIsInByb3BzIiwiZW1pdHMiLCJzZXR1cCIsIl9fcHJvcHMiLCJlbWl0IiwibnMiLCJ1c2VOYW1lc3BhY2UiLCJoYW5kbGVDbGljayIsImV2ZW50IiwiX2N0eCIsIl9jYWNoZSIsIm9wZW5CbG9jayIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImNsYXNzIiwibm9ybWFsaXplQ2xhc3MiLCJ1bnJlZiIsImIiLCJtIiwiaXMiLCJvbkNsaWNrIiwiY3JlYXRlQmxvY2siLCJFbEljb24iLCJrZXkiLCJ3aXRoQ3R4IiwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnQiLCJfIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwiJHNsb3RzIiwiZSIsInJlbmRlclNsb3QiXSwibWFwcGluZ3MiOiIySkFJQSxNQUFNQSxFQUFZQyxFQUFXLENBQzNCQyxLQUFNLENBQ0pBLEtBQU1DLE9BQ05DLE9BQVEsQ0FBQyxVQUFXLFVBQVcsVUFBVyxPQUFRLFNBQVUsV0FDNURDLFFBQVMsV0FFWEMsVUFBVyxDQUNUSixLQUFNSyxRQUNORixTQUFTLEdBRVhHLFNBQVUsQ0FBRU4sS0FBTUssUUFBU0YsU0FBUyxHQUNwQ0ksS0FBTSxDQUFFUCxLQUFNQyxPQUFRRSxRQUFTLElBQy9CSyxLQUFNLENBQ0pSLEtBQU1TLEtBR0pDLEVBQVksQ0FDaEJDLE1BQVFDLEdBQVFBLGFBQWVDLFlDZDNCQyxFQUFhLENBQUMsUUFDZEMsRUFBY0MsRUFBZ0IsQ0FDbENDLEtBQU0sV0NKSCxNQUFDQyxFQUFTQyxJRE1tQ0gsRUFBQSxJQUM3Q0QsRUFDSEssTUFBT3RCLEVBQ1B1QixNQUFPWCxFQUNQWSxNQUFNQyxHQUFTQyxLQUFFQSxJQUNmLE1BQU1KLEVBQVFHLEVBQ1JFLEVBQUtDLEVBQWEsUUFDeEIsU0FBU0MsRUFBWUMsR0FDZFIsRUFBTWQsVUFDVGtCLEVBQUssUUFBU0ksRUFDakIsQ0FDTSxNQUFBLENBQUNDLEVBQU1DLEtBQ0xDLElBQWFDLEVBQW1CLElBQUssQ0FDMUNDLE1BQU9DLEVBQWUsQ0FDcEJDLEVBQU1WLEdBQUlXLElBQ1ZELEVBQU1WLEdBQUlZLEVBQUVSLEVBQUs3QixNQUNqQm1DLEVBQU1WLEdBQUlhLEdBQUcsV0FBWVQsRUFBS3ZCLFVBQzlCNkIsRUFBTVYsR0FBSWEsR0FBRyxZQUFhVCxFQUFLekIsWUFBY3lCLEVBQUt2QixZQUVwREMsS0FBTXNCLEVBQUt2QixXQUFhdUIsRUFBS3RCLFVBQU8sRUFBU3NCLEVBQUt0QixLQUNsRGdDLFFBQVNaLEdBQ1IsQ0FDREUsRUFBS3JCLE1BQVF1QixJQUFhUyxFQUFZTCxFQUFNTSxHQUFTLENBQUVDLElBQUssR0FBSyxDQUMvRHZDLFFBQVN3QyxHQUFRLElBQU0sRUFDcEJaLElBQWFTLEVBQVlJLEVBQXdCZixFQUFLckIsV0FFekRxQyxFQUFHLEtBQ0NDLEVBQW1CLFFBQVEsR0FDakNqQixFQUFLa0IsT0FBTzVDLFNBQVc0QixJQUFhQyxFQUFtQixPQUFRLENBQzdEVSxJQUFLLEVBQ0xULE1BQU9DLEVBQWVDLEVBQU1WLEdBQUl1QixFQUFFLFdBQ2pDLENBQ0RDLEVBQVdwQixFQUFLa0IsT0FBUSxZQUN2QixJQUFNRCxFQUFtQixRQUFRLEdBQ3BDakIsRUFBS2tCLE9BQU92QyxLQUFPeUMsRUFBV3BCLEVBQUtrQixPQUFRLE9BQVEsQ0FBRUwsSUFBSyxJQUFPSSxFQUFtQixRQUFRLElBQzNGLEdBQUloQyxHQUVWLElBRStDLENBQUMsQ0FBQyxTQUFVIn0=
